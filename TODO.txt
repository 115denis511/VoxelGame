-   Voxel/MarchingCubesManager.h
    -   (РЕШЕНО) Проблемы о отображение вариаций 11 (или 14?) типа марширующих кубов - часть повёрнутых и зеркальных вариаций рисуются вовнутрь.
        Проблема была в типе 14, для зеркальноко случая были некорректно указаны вершины треугольников. Некорректный код оставлен закоментированным.
        Нужно проверить другие типы на корректность.
    -   Сделать отображение текущего выбранного воксеся
    -   На текущий момент изменение смежного для 2-х и более чанков вокселя обновляет воксель только одного чанка. Это хорошо заметно, если начать
        массово удалять воксели, в результате можно заметить границы чанков из неудалённых и недоступных для редактирования вокселей.
    -   Рейкаст вокселя (MarchingCubesManager::raycastVoxel) работает криво - выбранный воксель не всегда самый близкий к центру экрана.
    -   Рейкаст не работает за пределами сетки чанков. Такое поведение справедливо для осей X и Z, но для Y это может быть проблемой
        (Например если выпасть вниз за карту или залесть выше предельной высоты).
    -   Работоспособность функций расширения и уменьшения сетки чанков (MarchingCubesManager::resizeChunkGrid) не протестированы
    -   После изменения размера сетки не корректируется origin позиция сетки (glm::ivec2 MarchingCubesManager::m_currentOriginChunk)
    -   Сделать объём и текстуры для вокселей, заготовка для этого сделана (VoxelVertex::vertexId, VoxelVertex::offsetDirection).
        Идея в том, что для каждой вершины фигуры присвоен Id вершины марширующего куба прилегающей к фигуре. Значения Id находятся в промежутке
        от 0 до 5. В ssbo данных чанка для фигур помимо локальных позиций упакованы данные размера и текстуры прилегающих вокселей.
        Размер и тектуры распоковываются в массивы, индексы которых соответствуют Id вершины марширующего куба.
        Размер вокселя - значение от 0 до 7, означет смещение вершины фигуры от 0.0f (0) до 0.9f (7) по направлению VoxelVertex::offsetDirection. 
        Направление является индексом, расшифровка которого не реализованна в шейдере, но есть в MarchingCubesCase::getVertexData 
        (см. constexpr int X_LEFT = 0, X_RIGHT = 1, Y_UP = 2, Y_DOWN = 3, Z_FRONT = 4, Z_BACK = 5;).
        ВАЖНО! КОД УПАКОВКИ В MarchingCubesSolver::regenerateChunk ЗАКОМЕНТИРОВАН, ТАК КАК В VoxelChunk НА ТЕКУЩИЙ МОМЕНТ НЕТ ДАННЫХ РАЗМЕРА ДЛЯ ВОКСЕЛЯ.
        Текстуры вокселя - значение от 0 до 127, является индексом текстуры в текстурном массиве для вокселей (На данный момент массив не реализован,
        используется захардкоденая текстура GLuint MarchingCubes::m_dbg_texture)
    -   Вынести VoxelVertex::vertexId в отдельный ubo или ssbo. Id должны соответсвовать glVertexId вершины в вершинном буфере.
        Таким образом, так как используется glDrawArrays, можно будет получить значения сразу из provoking вершины в вершинном
        шейдере (через glVertexId, glVertexId+1, glVertexId+2) для передачи flat значений не используя геометрический шейдер.
    -   Константы CHUNK_MAX_X_Z_SIZE и CHUNK_MAX_Y_SIZE дублируются в ChunkGrid.h и MarchingCubesManager.h. Вынести их в другое место
        (Например в engine_properties.h).
-   Render/AssetManager.h
    -   Model.h
        -   Сделать доступными для загрузки только файлы 3д моделей в форматах gltf и glb.
    -   TextureManager.h
        -   Метод TextureArrayRef addMixedTexture_RGB_A() и его варианты используют в качестве выбора канала для копирования в альфа канал
            итоговой текстуры маску в виде vec4. Переделать в enum.
-   РЕФАКТОРИНГ
    -   Переделать ВСЁ классы-менеджеры из статических в синглтоны.