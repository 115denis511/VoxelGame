>>> ПРОБЛЕМЫ И ИДЕИ
-   Voxel/MarchingCubesManager.h
    -   (РЕШЕНО) Проблемы о отображение вариаций 11 (или 14?) типа марширующих кубов - часть повёрнутых и зеркальных вариаций рисуются вовнутрь.
        Проблема была в типе 14, для зеркальноко случая были некорректно указаны вершины треугольников. Некорректный код оставлен закоментированным.
        Нужно проверить другие типы на корректность.
    -   Рейкаст вокселя (MarchingCubesManager::raycastVoxel) работает криво - выбранный воксель не всегда самый близкий к центру экрана.
    -   Рейкаст не работает за пределами сетки чанков. Такое поведение справедливо для осей X и Z, но для Y это может быть проблемой
        (Например если выпасть вниз за карту или залесть выше предельной высоты).
    -   При изменении размера сетки чанков в большую сторону меши новых чанков не учитывают воксели соседних пограничных чанков при генерации.
        Это легко заметить, если поставить на краю крайних чанков воксели и затем увеличить размер сетки.
-   Render/AssetManager.h
    -   Model.h
        -   Сделать доступными для загрузки только файлы 3д моделей в форматах gltf и glb.
	-   Заменить библиотеку загрузки моделей ASSIMP на какю-нибуть другую и более легковесную (TinyGLTF?).
    -   TextureManager.h
        -   Метод TextureArrayRef addMixedTexture_RGB_A() и его варианты используют в качестве выбора канала для копирования в альфа канал
            итоговой текстуры маску в виде vec4. Переделать в enum.
-   РЕФАКТОРИНГ
    -   Переделать ВСЕ классы-менеджеры из статических в синглтоны.
-   ОПЦИИ КОМПИЛЯТОРА
    -   LTO, PGO и --march=native (https://www.youtube.com/watch?v=YfgwPY5FulY)
    -	std::ios::sync_with_stdio(false);
-   ИНКЛЮДЫ
    -	Включить define GLM_FORCE_INTRINSICS в stdafx.h, но для этого придётся убрать все constexpr объекты классов GLM во всём проекте.
-   РЕНДЕРИНГ
    -   Переписать математику в SphereVolume::isInFrustum с применением std::valarray (для SIMD).
    -   Реализовать постройку и перестройку BVHTree из набора объектов с применением кодов Мортона.
    -   Идея оптимизации BVHTree через "выпрямление" поддеревьев:
        Можно добавить в структуру Node два новых поля: neighbourLeft и neighbourRight являющиеся индексами левого/правого соседа (для листьев) 
        или указателями на самый левый/правый лист поддерева (для узлов).
        В данной реализации если bounding volume узла полностью находится внутри пирамиды, можно сразу перейти к обходу листьев как связного 
        списка (через neighbourLeft/neighbourRight), минуя промежуточные узлы.

>>> ПЛАН
    -   Voxel/MarchingCubesManager.h
        -   Изменить размеры смещений вершины фигуры от центра вокселя (плотности вокселей) в MarchingCubes.cpp::addTriangle() уменьшив их на 0.125.
            В текущем виде некоторые пограничные треугольники вокселей максимальной плотности становятся невидимыми, из-за чего между 
            марширующии кубами пропадает плавный переход текстур.
            Но в таком случае нужно добавить дополнительный небольшой размер смещения для наименьшей (нулевой) плотности вокселя, так как она станет невидимой
            из-за нулевого размера.
        -   При генерации чанков не обновляются пограничные воксели соседних чанков.
        -   Доделать алгоритм пересечения луча с воксельным полем, добавив проверку на пересечение с треугольниками марширующего куба.
        -   Сделать простейший генератор ландшафта.
            -   Переместить код генерации мира из MarchingCubesManager::resizeChunkGrid в MarchingCubesManager::updateChunks.
    -   Привести в порядок систему компонентов.
    -   Простейшая реализация физики и компонента физики.
    -   Интерфейс:
        -   Рендер текста
        -   Окна
        -   Текстовые метки
        -   Кнопки
        -   Чекбоксы
        -   Слайдеры
        -   Элемент изображений, способный вывести ЛЮБУЮ текстуру
    -   Система освещения
    -   Многопоточность